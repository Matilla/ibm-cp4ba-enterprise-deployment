# Default values for openldap.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
updateStrategy:
  {}
  # When a StatefulSet's .spec.updateStrategy.type is set to OnDelete,
  # the StatefulSet controller will not automatically update the Pods
  # in a StatefulSet. Users must manually delete Pods to cause the
  # controller to create new Pods that reflect modifications made
  # to a StatefulSet's .spec.template.
  #
  # type: OnDelete
  #
  # or
  #
  # When a StatefulSet's .spec.updateStrategy.type is set to RollingUpdate,
  # the StatefulSet controller will delete and recreate each Pod in the StatefulSet.
  # It will proceed in the same order as Pod termination (from the largest ordinal
  # to the smallest), updating each Pod one at a time. It will wait until an updated
  # Pod is Running and Ready prior to updating its predecessor.
  #
  # type: RollingUpdate
  # rollingUpdate:
  #   partition: 1
image:
  # From repository https://github.com/osixia/docker-openldap
  repository: osixia/openldap
  tag: 1.5.0
  pullPolicy: IfNotPresent
  # pullSecret: harbor

# Set the container log level
# Valid log levels: none, error, warning, info (default), debug, trace
logLevel: info

# Specifies an existing secret to be used for admin and config user passwords
existingSecret: ""

# Settings for enabling TLS with custom certificate
# need a secret with tls.crt, tls.key and ca.crt keys with associated files
# Ref: https://kubernetes.io/docs/tasks/configmap-secret/managing-secret-using-kubectl/#create-a-secret
customTLS:
  enabled: false
  secret: "" # The name of a kubernetes.io/tls type secret to use for TLS
## Add additional labels to all resources
extraLabels: {}
## Add additional annotations to pods
podAnnotations: {}
service:
  annotations: {}

  ldapPort: 389
  sslLdapPort: 636

  ## If service type NodePort, define the value here
  #ldapPortNodePort:
  #sslLdapPortNodePort:
  ## List of IP addresses at which the service is available
  ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
  ##
  externalIPs: []

  #loadBalancerIP:
  #loadBalancerSourceRanges: []
  type: ClusterIP
  sessionAffinity: None

# Default configuration for openldap as environment variables. These get injected directly in the container.
# Use the env variables from https://github.com/osixia/docker-openldap#beginner-guide
env:
  LDAP_LOG_LEVEL: "256"
  LDAP_ORGANISATION: "CP"
  LDAP_DOMAIN: "cp"
  LDAP_READONLY_USER: "false"
  LDAP_READONLY_USER_USERNAME: "readonly"
  LDAP_READONLY_USER_PASSWORD: "readonly"
  LDAP_RFC2307BIS_SCHEMA: "false"
  LDAP_BACKEND: "mdb"
  LDAP_TLS: "true"
  LDAP_TLS_CRT_FILENAME: "tls.crt"
  LDAP_TLS_KEY_FILENAME: "tls.key"
  LDAP_TLS_DH_PARAM_FILENAME: "dhparam.pem"
  LDAP_TLS_CA_CRT_FILENAME: "ca.crt"
  LDAP_TLS_ENFORCE: "false"
  CONTAINER_LOG_LEVEL: "4"
  LDAP_TLS_REQCERT: "never"
  KEEP_EXISTING_CONFIG: "false"
  LDAP_REMOVE_CONFIG_AFTER_SETUP: "true"
  LDAP_SSL_HELPER_PREFIX: "ldap"
  LDAP_TLS_VERIFY_CLIENT: "never"
  LDAP_TLS_PROTOCOL_MIN: "3.0"
  LDAP_TLS_CIPHER_SUITE: "NORMAL"

# Default Passwords to use, stored as a secret.
# You can override these at install time with
# helm install openldap --set openldap.adminPassword=<passwd>,openldap.configPassword=<passwd>
adminPassword: '{{UNIVERSAL_PASSWORD}}'
configPassword: '{{UNIVERSAL_PASSWORD}}'

# Custom openldap configuration files used to override default settings
customLdifFiles:
  01-sds-schema.ldif: |-
    dn: cn=sds,cn=schema,cn=config
    objectClass: olcSchemaConfig
    cn: sds
    olcAttributeTypes: {0}( 1.3.6.1.4.1.42.2.27.4.1.6 NAME 'ibm-entryUuid' DESC 
      'Uniquely identifies a directory entry throughout its life.' EQUALITY caseIgnoreMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE )
    olcObjectClasses: {0}( 1.3.6.1.4.1.42.2.27.4.2.1 NAME 'sds' DESC 'sds' SUP top AUXILIARY MUST ( cn $ ibm-entryuuid ) )
  02-default-users.ldif: |-
    # Units
    dn: ou=Users,dc=cp
    objectClass: organizationalUnit
    ou: Users

    dn: ou=Groups,dc=cp
    objectClass: organizationalUnit
    ou: Groups

    # Users
    dn: uid=cpadmin,ou=Users,dc=cp
    objectClass: inetOrgPerson
    objectClass: sds
    cn: cpadmin
    sn: cpadmin
    uid: cpadmin
    mail: cpadmin@cp.local
    userpassword:: {{BASE64_UNIVERSAL_PASSWORD}}
    employeeType: admin
    ibm-entryuuid: e6c41859-ced3-4772-bfa3-6ebbc58ec78a

    dn: uid=cpadmin1,ou=Users,dc=cp
    objectClass: inetOrgPerson
    objectClass: sds
    cn: cpadmin1
    sn: cpadmin1
    uid: cpadmin1
    mail: cpadmin1@cp.local
    userpassword:: {{BASE64_UNIVERSAL_PASSWORD}}
    employeeType: admin
    ibm-entryuuid: 40324128-84c8-48c3-803d-4bef500f84f1

    dn: uid=cpadmin2,ou=Users,dc=cp
    objectClass: inetOrgPerson
    objectClass: sds
    cn: cpadmin2
    sn: cpadmin2
    uid: cpadmin2
    mail: cpadmin2@cp.local
    userpassword:: {{BASE64_UNIVERSAL_PASSWORD}}
    employeeType: admin
    ibm-entryuuid: 53f96449-2b7e-4402-a58a-9790c5089dd0

    dn: uid=cpuser,ou=Users,dc=cp
    objectClass: inetOrgPerson
    objectClass: sds
    cn: cpuser
    sn: cpuser
    uid: cpuser
    mail: cpuser@cp.local
    userpassword:: {{BASE64_UNIVERSAL_PASSWORD}}
    ibm-entryuuid: 30183bb0-1012-4d23-8ae2-f94816b91a75

    dn: uid=cpuser1,ou=Users,dc=cp
    objectClass: inetOrgPerson
    objectClass: sds
    cn: cpuser1
    sn: cpuser1
    uid: cpuser1
    mail: cpuser1@cp.local
    userpassword:: {{BASE64_UNIVERSAL_PASSWORD}}
    ibm-entryuuid: ced63be9-411a-4222-b97e-189ddec2beab

    dn: uid=cpuser2,ou=Users,dc=cp
    objectClass: inetOrgPerson
    objectClass: sds
    cn: cpuser2
    sn: cpuser2
    uid: cpuser2
    mail: cpuser2@cp.local
    userpassword:: {{BASE64_UNIVERSAL_PASSWORD}}
    ibm-entryuuid: a208fc01-96aa-43f6-9279-35e9725d9fbd

    # Groups
    dn: cn=cpadmins,ou=Groups,dc=cp
    objectClass: groupOfNames
    objectClass: sds
    cn: cpadmins
    ibm-entryuuid: 4196cb9e-1ed7-4c02-bb0d-792cb7bfa768
    member: uid=cpadmin,ou=Users,dc=cp
    member: uid=cpadmin1,ou=Users,dc=cp
    member: uid=cpadmin2,ou=Users,dc=cp

    dn: cn=cpusers,ou=Groups,dc=cp
    objectClass: groupOfNames
    objectClass: sds
    cn: cpusers
    ibm-entryuuid: fc4ded27-8c6a-4a8c-ad9e-7be65369758c
    member: uid=cpadmin,ou=Users,dc=cp
    member: uid=cpadmin1,ou=Users,dc=cp
    member: uid=cpadmin2,ou=Users,dc=cp
    member: uid=cpuser,ou=Users,dc=cp
    member: uid=cpuser1,ou=Users,dc=cp
    member: uid=cpuser2,ou=Users,dc=cp

    dn: cn=cpusers1,ou=Groups,dc=cp
    objectClass: groupOfNames
    objectClass: sds
    cn: cpusers1
    ibm-entryuuid: 7249b636-39b4-456b-8e52-ea4340ee4a6c
    member: uid=cpuser,ou=Users,dc=cp
    member: uid=cpuser1,ou=Users,dc=cp
    member: uid=cpuser2,ou=Users,dc=cp

    # FNCM Task Manager groups
    dn: cn=TaskAdmins,ou=Groups,dc=cp
    objectClass: groupOfNames
    objectClass: sds
    cn: TaskAdmins
    ibm-entryuuid: 001f19c1-cfcc-4b35-b080-85e946eed707
    member: uid=cpadmin,ou=Users,dc=cp

    dn: cn=TaskUsers,ou=Groups,dc=cp
    objectClass: groupOfNames
    objectClass: sds
    cn: TaskUsers
    ibm-entryuuid: 7b370bce-da87-4135-828d-f80b5ca9b80b
    member: uid=cpadmin,ou=Users,dc=cp
    member: uid=cpuser,ou=Users,dc=cp

    dn: cn=TaskAuditors,ou=Groups,dc=cp
    objectClass: groupOfNames
    objectClass: sds
    cn: TaskAuditors
    ibm-entryuuid: 1b85d3b3-bba7-4f4c-a3b1-255cdf9885c0
    member: uid=cpadmin,ou=Users,dc=cp    


# Predefine users here
replication:
  enabled: false
  # Enter the name of your cluster, defaults to "cluster.local"
  clusterName: "cluster.local"
  retry: 60
  timeout: 1
  interval: 00:00:00:10
  starttls: "critical"
  tls_reqcert: "never"
## Persist data to a persistent volume
persistence:
  enabled: true
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "standard-singlewriter"
  # existingClaim: openldap-pvc
  accessModes:
    - ReadWriteMany
  size: 8Gi
  storageClass: "{{STORAGE_CLASS_NAME}}"

## Configure extra options for liveness, readiness, and startup probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
livenessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 10
readinessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 10
startupProbe:
  enabled: false
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 30

resources:
  {}
  # requests:
  #   cpu: "100m"
  #   memory: "256Mi"
  # limits:
  #   cpu: "500m"
  #   memory: "512Mi"

nodeSelector: {}

tolerations: []

## test container details
test:
  enabled: false
ltb-passwd:
  enabled: false

phpldapadmin:
  enabled: true
  ingress:
    enabled: false
  env:
    PHPLDAPADMIN_LDAP_HOSTS: openldap-openldap-stack-ha
