apiVersion: icp4a.ibm.com/v1
kind: ICP4ACluster
metadata:
  name: "{{ cp4ba_cr_meta_name }}"
  namespace: "{{ cp4ba_project_name }}"
  labels:
    app.kubernetes.io/instance: ibm-dba
    app.kubernetes.io/managed-by: ibm-dba
    app.kubernetes.io/name: ibm-dba
    release: "{{ cp4ba_version }}"
spec:
  appVersion: "{{ cp4ba_version }}"
  ibm_license: accept
  shared_configuration:
    no_log: false
    sc_deployment_fncm_license: non-production
    sc_deployment_baw_license: non-production
    sc_deployment_license: non-production
    image_pull_secrets:
      - ibm-entitlement-key
    show_sensitive_log: true
    root_ca_secret: cp4ba-root-ca
    sc_deployment_patterns: ""
    sc_optional_components: ""
    sc_deployment_type: productiown
    sc_deployment_profile_size: small
    sc_deployment_platform: "{{ cp4ba_deployment_platform }}"
    sc_ingress_enable: false
    sc_deployment_hostname_suffix: "{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}"
    sc_image_repository: cp.icr.io
    trusted_certificate_list: []
    sc_install_automation_base: true # Originaly Based on https://www.ibm.com/docs/en/cloud-paks/cp-biz-automation/21.0.3?topic=insights-customizing-kafka-elasticsearch-server-configuration,
    # but that no longer is valid, with false, the automation base connection information for elastic search are not created properly
    # which then stops processing of the Cloud Pak operator. TODO: Should probably still be false, verify
    # TODO causing errors with other secrets like, BAI, ADP - CDS, enable when fixed   external_tls_certificate_secret: cp4ba-wildcard
    storage_configuration:
      sc_slow_file_storage_classname: "{{ cp4ba_storage_class_name }}"
      sc_medium_file_storage_classname: "{{ cp4ba_storage_class_name }}"
      sc_fast_file_storage_classname: "{{ cp4ba_storage_class_name }}"
      sc_block_storage_classname: "{{ cp4ba_storage_class_name }}"
  ldap_configuration:
    lc_selected_ldap_type: "{{ lc_selected_ldap_type | default('IBM Security Directory Server') }}"
    lc_ldap_server: "{{ lc_ldap_server | default(cp4ba_ldap_hostnamep) }}"
    lc_ldap_port: "{{ lc_ldap_port | default('389') }}"
    lc_bind_secret: "{{ lc_bind_secret | default('ldap-bind-secret') }}"
    lc_ldap_base_dn: "{{ lc_ldap_base_dn | default('dc=cp') }}"
    lc_ldap_ssl_enabled: "{{ lc_ldap_ssl_enabled | default(false) }}"
    lc_ldap_user_name_attribute: "{{ lc_ldap_user_name_attribute | default('*:cn') }}"
    lc_ldap_user_display_name_attr: "{{ lc_ldap_user_display_name_attr | default('cn') }}"
    lc_ldap_group_base_dn: "{{ lc_ldap_group_base_dn | default('ou=Groups, dc=cp') }}"
    lc_ldap_group_name_attribute: "{{ lc_ldap_group_name_attribute | default('*:cn') }}"
    lc_ldap_group_display_name_attr: "{{ lc_ldap_group_display_name_attr | default('cn') }}"
    lc_ldap_group_membership_search_filter: "{{ lc_ldap_group_membership_search_filter | default('(|(&(objectclass=groupofnames)(member={0}))(&(objectclass=groupofuniquenames)(uniquemember={0})))') }}"
    lc_ldap_group_member_id_map: "{{ lc_ldap_group_member_id_map | default('groupofnames:member') }}"
    {% if 'IBM Security Directory Server' in lc_selected_ldap_type %}
    tds:
      lc_user_filter: "{{ lc_tds_user_filter  | default('(&(cn=%v)(objectclass=inetOrgPerson))') }}"
      lc_group_filter: "{{ lc_tds_group_filter  | default('(&(cn=%v)(|(objectclass=groupofnames)(objectclass=groupofuniquenames)(objectclass=groupofurls)))') }}"
    {% elif 'Microsoft Active Directory' in lc_selected_ldap_type %}
    ad:
      lc_user_filter: "{{ lc_ad_user_filter | default('(&(sAMAccountName=%v)(objectcategory=user))') }}"
      lc_group_filter: "{{ lc_ad_group_filter | default('(&(cn=%v)(objectcategory=group))') }}"
    {% endif %}
  datasource_configuration:
    dc_ssl_enabled: false
