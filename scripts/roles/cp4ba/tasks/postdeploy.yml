# Based on https://www.ibm.com/docs/en/cloud-paks/cp-biz-automation/21.0.3?topic=tasks-business-automation-navigator
# Based on https://www.ibm.com/docs/en/cloud-paks/cp-biz-automation/21.0.3?topic=tasks-business-automation-navigator point 2.
# License files generated following https://www.ibm.com/docs/en/daeja-viewone/5.0.x?topic=modules-enabling-viewer-add-in-content-navigator
# IBM Daeja ViewONE Virtual Permanent Redaction Server Module & IBM Daeja ViewONE Virtual Module for Microsoft Office are part of CP4BA
#   as per LI at http://www-03.ibm.com/software/sla/sladb.nsf/lilookup/31BA4BF94C59AD55852586FE0060B39C?OpenDocument

- name: Get Navigator Pod
  k8s_info:
    api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    host: "{{ cp4ba_k8s_host | default(omit) }}"
    api_version: v1
    kind: Pod
    namespace: "{{ cp4ba_project_name }}"
    label_selectors:
      - app = cp4ba-navigator-deploy
  register: pods
  retries: 40
  delay: 15

- name: Copy Daeja License files to output dir
  ansible.builtin.copy:
    src: "files/ban/{{ item }}"
    dest: "{{ cp4ba_output_directory }}/{{ item }}"
    mode: 0664
  with_items:
    - lic-server-virtual.v1
    - lic-server.v1

- name: Copy Daeja License
  kubernetes.core.k8s_cp:
    api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    host: "{{ cp4ba_k8s_host | default(omit) }}"
    namespace: "{{ cp4ba_project_name }}"
    pod: "{{ pods.resources[0].metadata.name }}"
    remote_path: /opt/ibm/wlp/usr/servers/defaultServer/configDropins/overrides/
    local_path: "{{ cp4ba_output_directory }}/{{ item }}"
  with_items:
    - lic-server-virtual.v1
    - lic-server.v1

# Based on https://www.ibm.com/docs/en/cloud-paks/cp-biz-automation/21.0.3?topic=tasks-business-automation-studio
# Get access token for ZEN administrative initial user

- name: Get Zen Initial Admin User Secret
  k8s_info:
    api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    host: "{{ cp4ba_k8s_host | default(omit) }}"
    api_version: v1
    kind: Secret
    namespace: "{{ cp4ba_project_name }}"
    name: admin-user-details
  register: secret
  retries: 40
  delay: 15

- name: Get Zen Core Pods
  k8s_info:
    api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    host: "{{ cp4ba_k8s_host | default(omit) }}"
    api_version: v1
    kind: Pod
    namespace: "{{ cp4ba_project_name }}"
    label_selectors:
      - component = zen-core
  register: pods
  retries: 40
  delay: 15

- name: Get Zen Initial Admin User Acccess Token
  kubernetes.core.k8s_exec:
    api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    host: "{{ cp4ba_k8s_host | default(omit) }}"
    namespace: cp4ba
    pod: "{{ pods.resources[0].metadata.name }}"
    command: >
      curl -k -X POST https://zen-core-api-svc:4444/openapi/v1/authorize
      --header 'Content-Type: application/json'
      --header "Accept: application/json"
      --data-raw '{
        "username": "admin",
        "password": "{{ secret.resources[0].data.initial_admin_password | b64decode }}"
      }'
  register: token_response

- name: Get OCP Apps domain
  include_role:
    name: common
    tasks_from: apps-endpoint
  vars:
    common_k8s_api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    common_k8s_host: "{{ cp4ba_k8s_host | default(omit) }}"
    common_output_to_var: "apps_endpoint_domain"

# Groups endpoint found based on the network dev tools in the browser
- name: Add All Roles to cpadmins group
  uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ token_response.stdout | from_json | json_query('token') }}"
    body_format: json
    body:
      name: cpadmins
      role_identifiers: "{{ user_roles }}"
    validate_certs: false
    status_code:
      - 409
      - 201
  register: group_response
  vars:
    user_roles:
      - zen_administrator_role
      - iaf-automation-admin
      - iaf-automation-analyst
      - iaf-automation-developer
      - iaf-automation-operator
      - zen_user_role

- name: Register ldap group with the zen group
  uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups/{{ group_response.json.group_id }}/members"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ token_response.stdout | from_json | json_query('token') }}"
    body_format: json
    body:
      user_identifiers: []
      ldap_groups: ["cn={{ group_response.json.name }},ou=Groups,dc=cp"]
    validate_certs: false
    status_code:
      - 200
  when: group_response.status == 201

- block:

    - name: Get the zen groups
      uri:
        url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups"
        method: GET
        headers:
          Accept: application/json
          Authorization: "Bearer {{ token_response.stdout | from_json | json_query('token') }}"
        validate_certs: false
        status_code: 200
      register: get_groups_response

    - name: Register ldap group with the zen group cpadmins
      uri:
        url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups/{{ group_id }}/members"
        method: POST
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ token_response.stdout | from_json | json_query('token') }}"
        body_format: json
        body:
          user_identifiers: []
          ldap_groups: ["cn={{ group_name }},ou=Groups,dc=cp"]
        validate_certs: false
      register: register_group_response
      vars:
        group_id_query: json.results[?name == 'cpadmins']
        group_id: "{{ get_groups_response | json_query(group_id_query) | first | json_query('group_id') }}"
        group_name: "{{ get_groups_response | json_query(group_id_query) | first | json_query('name') }}"
      failed_when: >
        (register_group_response.status != 200) and
        ('duplicate key value' not in register_group_response.content)

  when: group_response.status == 409

# Groups endpoint found based on the network dev tools in the browser
- name: Add All Roles to cpusers groups
  uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ token_response.stdout | from_json | json_query('token') }}"
    body_format: json
    body:
      name: "{{ item }}"
      role_identifiers: "{{ user_roles }}"
    validate_certs: false
    status_code:
      - 201
      - 409
  vars:
    user_roles:
      - iaf-automation-analyst
      - iaf-automation-developer
      - iaf-automation-operator
      - zen_user_role
  with_items:
    - cpusers
    - cpusers1
  register: group_responses

- name: Register ldap groups with the zen groups
  uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups/{{ item.json.group_id }}/members"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ token_response.stdout | from_json | json_query('token') }}"
    body_format: json
    body:
      user_identifiers: []
      ldap_groups: ["cn={{ item.json.name }},ou=Groups,dc=cp"]
    validate_certs: false
    status_code:
      - 200
  when: item.status == 201
  loop: "{{ group_responses.results }}"

- block:

    - name: Get the zen groups
      uri:
        url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups"
        method: GET
        headers:
          Accept: application/json
          Authorization: "Bearer {{ token_response.stdout | from_json | json_query('token') }}"
        validate_certs: false
        status_code: 200
      register: get_groups_response

    - name: Register ldap group with the zen group cpusers
      uri:
        url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups/{{ group_id }}/members"
        method: POST
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ token_response.stdout | from_json | json_query('token') }}"
        body_format: json
        body:
          user_identifiers: []
          ldap_groups: ["cn={{ group_name }},ou=Groups,dc=cp"]
        validate_certs: false
      register: register_group_response
      loop:
        - cpusers
        - cpusers1
      vars:
        group_id_query: json.results[?name == '{{ item }}']
        group_id: "{{ get_groups_response | json_query(group_id_query) | first | json_query('group_id') }}"
        group_name: "{{ get_groups_response | json_query(group_id_query) | first | json_query('name') }}"
      failed_when: >
        (register_group_response.status != 200) and
        ('duplicate key value' not in register_group_response.content)

  when: (409 in group_responses | json_query('results[*].status'))

# Based on https://www.ibm.com/docs/en/cpfs?topic=apis-oidc-registration#get2 (Get access token by using username and password)
- name: Get IAM access token
  uri:
    url: "https://cp-console.{{ apps_endpoint_domain }}/idprovider/v1/auth/identitytoken"
    method: POST
    headers:
      Content-Type: application/x-www-form-urlencoded;charset=UTF-8
    body_format: form-urlencoded
    body:
      grant_type: password
      username: cpadmin
      password: "{{ cp4ba_universal_password }}"
      scope: openid
    validate_certs: false
    status_code:
      - 200
  register: token_response

# Based on https://www.ibm.com/docs/en/cloud-paks/cp-data/4.0?topic=resources-generating-authorization-token
- name: Exchange IAM access token for Zen token
  uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/v1/preauth/validateAuth"
    method: GET
    headers:
      iam-token: "{{ token_response | json_query('json.access_token') }}"
      username: cpadmin
    validate_certs: false
    status_code:
      - 200
  register: token_response

# Based on https://www.ibm.com/docs/en/cloud-paks/cp-biz-automation/21.0.3?topic=secrets-creating-custom-bpc-workforce-secret
- name: Get BPM Systems Federated Response
  uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/pfs/rest/bpm/federated/v1/systems"
    method: GET
    headers:
      Authorization: "Bearer {{ token_response | json_query('json.accessToken') }}"
    validate_certs: false
    status_code:
      - 200
  register: bpm_systems_response

- name: Prepare yaml file for the Workforce Insights Secret
  template:
    src: bai/workforce-insights-config-secret.yaml.j2
    dest: "{{ cp4ba_output_directory }}/workforce-insights-config-secret.yaml"
    mode: u+rwx
  vars:
    system_type_query: json.federationResult[?systemType=='SYSTEM_TYPE_WLE']
    system_id: "{{ bpm_systems_response | json_query(system_type_query) | first | json_query('systemID') }}"
    username: cpadmin
    password: "{{ cp4ba_universal_password }}"
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/bawaut"

- name: Add the Workforce Insights Secret
  k8s:
    api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    host: "{{ cp4ba_k8s_host | default(omit) }}"
    src: "{{ cp4ba_output_directory }}/workforce-insights-config-secret.yaml"
    state: present
    merge_type: merge
    force: false
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Get BPC Pods
  k8s_info:
    api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    host: "{{ cp4ba_k8s_host | default(omit) }}"
    api_version: v1
    kind: Pod
    namespace: "{{ cp4ba_project_name }}"
    label_selectors:
      - component = iaf-insights-engine-cockpit
  register: pods
  retries: 40
  delay: 15

- name: Delete BPC pods
  k8s:
    api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    host: "{{ cp4ba_k8s_host | default(omit) }}"
    api_version: v1
    kind: Pod
    state: absent
    namespace: "{{ cp4ba_project_name }}"
    name: "{{ item.metadata.name }}"
  loop: "{{ pods.resources }}"

- name: Wait for BPC Deployment Available State
  include_role:
    name: common
    tasks_from: wait-resource-condition
  vars:
    common_k8s_api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    common_k8s_host: "{{ cp4ba_k8s_host | default(omit) }}"
    common_api_version: v1
    common_resource_kind: Deployment
    common_resource_name: iaf-insights-engine-cockpit
    common_resource_namespace: "{{ cp4ba_project_name }}"
    common_condition_name: Available
    common_retries: 80
    common_delay: 15

- name: Prepare yaml file for ODM OIDC Providers Config Map
  template:
    src: odm/odm-oidc-providers-cm.yaml.j2
    dest: "{{ cp4ba_output_directory }}/odm-oidc-providers-cm.yaml"
    mode: u+rwx

- name: Add the ODM OIDC Providers Config Map
  k8s:
    api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    host: "{{ cp4ba_k8s_host | default(omit) }}"
    src: "{{ cp4ba_output_directory }}/odm-oidc-providers-cm.yaml"
    state: present
    merge_type: merge
    force: false
    wait: true
    wait_sleep: 15
    wait_timeout: 15

# Based on https://www.ibm.com/docs/en/cloud-paks/cp-biz-automation/21.0.3?topic=gst-task-2-connecting-git-repository-sharing-decision-service
- name: Create ADS organization in Gitea
  uri:
    url: "https://gitea.{{ apps_endpoint_domain }}/api/v1/orgs"
    method: POST
    headers:
      Content-Type: application/json
    body_format: json
    body:
      description: ""
      full_name: ""
      location: ""
      repo_admin_change_team_access: true
      username: ads
      visibility: private
      website: ""
    user: cpadmin
    password: "{{ cp4ba_universal_password }}"
    validate_certs: false
    status_code:
      - 200
      - 201

- name: Download maven plugins definition from ADS
  uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/ads/download/index.json"
    method: POST
    headers:
      Authorization: "Bearer {{ token_response | json_query('json.accessToken') }}"
    validate_certs: false
    status_code:
      - 200
      - 201
  register: ads_maven_plugins_response
