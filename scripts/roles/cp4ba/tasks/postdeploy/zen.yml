- name: Get OCP Apps domain
  ansible.builtin.include_role:
    name: common
    tasks_from: apps-endpoint
  vars:
    common_k8s_api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    common_k8s_host: "{{ cp4ba_k8s_host | default(omit) }}"
    common_output_to_var: "apps_endpoint_domain"

# Based on https://www.ibm.com/docs/en/cloud-paks/cp-biz-automation/22.0.1?topic=tasks-business-automation-studio
# Get access token for ZEN administrative initial user
- name: Get Zen Initial Admin User Secret
  kubernetes.core.k8s_info:
    api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    host: "{{ cp4ba_k8s_host | default(omit) }}"
    api_version: v1
    kind: Secret
    namespace: "{{ cp4ba_project_name }}"
    name: admin-user-details
  register: secret
  retries: 40
  delay: 15

# Based on introspection of Zen NGINX configs in Deployment ibm-nginx in /user-home/_global_/nginx-conf.d/icp4d-open-api-configmap.conf
# Based on CP4BA Operator code ansible\roles\AS-ID\tasks\iam-verify-and-add.yml@69+
- name: Get Zen Initial Admin User Acccess Token
  ansible.builtin.uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/icp4d-api/v1/authorize"
    method: POST
    body_format: json
    body:
      username: admin
      password: "{{ secret.resources[0].data.initial_admin_password | b64decode }}"
    validate_certs: false
    status_code: 200
  register: token_response

- name: Retrieve Zen Initial User Access Token
  ansible.builtin.set_fact:
    zen_token: "{{ token_response.json | json_query('token') }}"

# Groups endpoint found based on the network dev tools in the browser
- name: Add All Roles to admin groups
  ansible.builtin.uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ zen_token }}"
    body_format: json
    body:
      name: "{{ item }}"
      role_identifiers: "{{ user_roles }}"
    validate_certs: false
    status_code:
      - 201
      - 409
  with_items: "{{ lc_admin_groups }}"
  register: group_response
  vars:
    user_roles:
      - zen_administrator_role
      - iaf-automation-admin
      - iaf-automation-analyst
      - iaf-automation-developer
      - iaf-automation-operator
      - zen_user_role

- name: Get IAM token
  ansible.builtin.include_role:
    name: common
    tasks_from: iam-token-user
  vars:
    common_k8s_api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    common_k8s_host: "{{ cp4ba_k8s_host | default(omit) }}"
    common_user: "{{ lc_principal_admin_user }}"
    common_password: "{{ lc_principal_admin_password }}"
    common_output_to_var: "iam_token"

- name: Get Zen token
  ansible.builtin.include_role:
    name: common
    tasks_from: zen-token
  vars:
    common_k8s_api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    common_k8s_host: "{{ cp4ba_k8s_host | default(omit) }}"
    comon_iam_token: "{{ iam_token }}"
    common_user: "{{ lc_principal_admin_user }}"
    common_namespace_name: "{{ cp4ba_project_name }}"
    common_output_to_var: "zen_token"

- name: Register ldap groups with the zen groups
  ansible.builtin.uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups/{{ item.json.group_id }}/members"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ zen_token }}"
    body_format: json
    body:
      user_identifiers: []
      ldap_groups: ["cn={{ item.json.name }},{{ lc_ldap_group_base_dn }}"]
    validate_certs: false
    status_code:
      - 200
  when: item.status == 201
  loop: "{{ group_response.results }}"

- name: Add ldap group to zen group
  block:

    - name: Get the zen groups
      ansible.builtin.uri:
        url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups"
        method: GET
        headers:
          Accept: application/json
          Authorization: "Bearer {{ zen_token }}"
        validate_certs: false
        status_code: 200
      register: get_groups_response

    - name: Register ldap group with the zen group cpusers
      ansible.builtin.uri:
        url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups/{{ group_id }}/members"
        method: POST
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ zen_token }}"
        body_format: json
        body:
          user_identifiers: []
          ldap_groups: ["cn={{ group_name }},{{ lc_ldap_group_base_dn }}"]
        validate_certs: false
        return_content: true
      register: register_group_response
      loop: "{{ lc_admin_groups }}"
      vars:
        group_id_query: json.results[?name == '{{ item }}']
        group_id: "{{ get_groups_response | json_query(group_id_query) | first | json_query('group_id') }}"
        group_name: "{{ get_groups_response | json_query(group_id_query) | first | json_query('name') }}"
      failed_when: >
        (register_group_response.status != 200) and
        ('duplicate_rule_for_group_id' not in register_group_response.content)

  when: (409 in group_response | json_query('results[*].status'))

# Groups endpoint found based on the network dev tools in the browser
- name: Add All Roles to cpusers groups
  ansible.builtin.uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ zen_token }}"
    body_format: json
    body:
      name: "{{ item }}"
      role_identifiers: "{{ user_roles }}"
    validate_certs: false
    status_code:
      - 201
      - 409
  vars:
    user_roles:
      - iaf-automation-analyst
      - iaf-automation-developer
      - iaf-automation-operator
      - zen_user_role
  with_items: "{{ lc_general_groups }}"
  register: group_response

- name: Register ldap groups with the zen groups
  ansible.builtin.uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups/{{ item.json.group_id }}/members"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ zen_token }}"
    body_format: json
    body:
      user_identifiers: []
      ldap_groups: ["cn={{ item.json.name }},{{ lc_ldap_group_base_dn }}"]
    validate_certs: false
    status_code:
      - 200
  when: item.status == 201
  loop: "{{ group_response.results }}"

- name: Add ldap group to zen group
  block:

    - name: Get the zen groups
      ansible.builtin.uri:
        url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups"
        method: GET
        headers:
          Accept: application/json
          Authorization: "Bearer {{ zen_token }}"
        validate_certs: false
        status_code: 200
      register: get_groups_response

    - name: Register ldap group with the zen group cpusers
      ansible.builtin.uri:
        url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v2/groups/{{ group_id }}/members"
        method: POST
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ zen_token }}"
        body_format: json
        body:
          user_identifiers: []
          ldap_groups: ["cn={{ group_name }},{{ lc_ldap_group_base_dn }}"]
        validate_certs: false
        return_content: true
      register: register_group_response
      loop: "{{ lc_general_groups }}"
      vars:
        group_id_query: json.results[?name == '{{ item }}']
        group_id: "{{ get_groups_response | json_query(group_id_query) | first | json_query('group_id') }}"
        group_name: "{{ get_groups_response | json_query(group_id_query) | first | json_query('name') }}"
      failed_when: >
        (register_group_response.status != 200) and
        ('duplicate_rule_for_group_id' not in register_group_response.content)

  when: (409 in group_response | json_query('results[*].status'))

# Needs to be added manually, otherwise WFPS doesn't work when CPFS admin username is customized
- name: Add cpfsadmin to zen
  ansible.builtin.uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v1/user"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ zen_token }}"
    body_format: json
    body:
      username: cpfsadmin
      displayName: cpfsadmin
      user_roles: [zen_administrator_role]
    validate_certs: false
    status_code:
      - 201
      - 409
  register: cpfsadmin_response

- name: Get IAM token
  ansible.builtin.include_role:
    name: common
    tasks_from: iam-token-user
  vars:
    common_k8s_api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    common_k8s_host: "{{ cp4ba_k8s_host | default(omit) }}"
    common_user: "cpfsadmin"
    common_password: "{{ cp4ba_universal_password }}"
    common_output_to_var: "iam_token"

# Based on https://www.ibm.com/docs/en/cpfs?topic=apis-oidc-registration#register
- name: Add service client to IAM
  ansible.builtin.uri:
    url: "https://cp-console.{{ apps_endpoint_domain }}/idprovider/v1/auth/registration"
    method: POST
    headers:
      Authorization: Bearer {{ iam_token }}
    body_format: json
    body:
      {
        "client_id": "cpadminservice",
        "client_name": "cpadminservice",
        "client_secret": "{{ cp4ba_universal_password }}",
        "scope": "openid profile email",
        "preauthorized_scope": "openid profile email",
        "introspect_tokens": true,
        "proofKeyForCodeExchange": true,
        "response_types": [
          "code",
          "token",
          "id_token token"
        ],
        "grant_types": [
          "authorization_code",
          "client_credentials",
          "implicit",
          "refresh_token",
          "urn:ietf:params:oauth:grant-type:jwt-bearer",
          "password"
        ],
        "allow_regexp_redirects":true,
        "redirect_uris": [
          "regexp:https://.*/oidcclient/redirect/.*"
        ],
        "appTokenAllowed": true,
        "application_type": "web",
        "subject_type": "public"
      }
    validate_certs: false
    status_code: 200
  register: client_response

- name: Add cpadminservice to zen
  ansible.builtin.uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v1/user"
    method: POST
    headers:
      Content-Type: application/json
      Authorization: "Bearer {{ zen_token }}"
    body_format: json
    body:
      username: cpadminservice
      displayName: cpadminservice
      user_roles:
        - zen_administrator_role
        - iaf-automation-admin
        - iaf-automation-analyst
        - iaf-automation-developer
        - iaf-automation-operator
        - zen_user_role
    validate_certs: false
    status_code:
      - 201
      - 409
  register: cpadminservice_response

- name: Get IAM token
  ansible.builtin.include_role:
    name: common
    tasks_from: iam-token-client
  vars:
    common_k8s_api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    common_k8s_host: "{{ cp4ba_k8s_host | default(omit) }}"
    common_client_id: "cpadminservice"
    common_client_secret: "{{ cp4ba_universal_password }}"
    common_output_to_var: "iam_token"

- name: Get Zen token
  ansible.builtin.include_role:
    name: common
    tasks_from: zen-token
  vars:
    common_k8s_api_key: "{{ cp4ba_k8s_api_key | default(omit) }}"
    common_k8s_host: "{{ cp4ba_k8s_host | default(omit) }}"
    comon_iam_token: "{{ iam_token }}"
    common_user: "cpadminservice"
    common_namespace_name: "{{ cp4ba_project_name }}"
    common_output_to_var: "zen_token"

# Based on network traffic
- name: Generate Zen API key for cpadminservice
  ansible.builtin.uri:
    url: "https://cpd-{{ cp4ba_project_name }}.{{ apps_endpoint_domain }}/usermgmt/v1/user/apiKey"
    method: GET
    headers:
      Authorization: Bearer {{ zen_token }}
    validate_certs: false
    status_code: 200
  register: zen_api_key_response

# TODO add to usage zen_api_key_response
