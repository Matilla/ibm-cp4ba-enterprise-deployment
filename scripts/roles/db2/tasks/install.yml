- name: Create Catalog Source directory for generated files
  file:
    path: "{{ db2_output_directory }}"
    state: directory

- name: Prepare yaml file for Project
  template:
    src: project.yaml.j2
    dest: "{{ db2_output_directory }}/project.yaml"

- name: Add Project
  k8s:
    api_key: "{{ db2_k8s_api_key | default(omit)}}"
    host: "{{db2_k8s_host | default(omit)}}"
    state: present
    force: False
    merge_type: merge
    src: "{{ db2_output_directory }}/project.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for Project
  k8s_info:
    api_key: "{{ db2_k8s_api_key | default(omit) }}"
    host: "{{ db2_k8s_host | default(omit) }}"
    api_version: project.openshift.io/v1
    kind: Project
    name: db2
  register: project
  retries: 10
  delay: 1
  until: ('Active' in project | json_query('resources[*].status.phase') | unique)

- block:

    - name: Prepare yaml for No Root Squash DB2 Service Account for NFS on IBM Cloud
      template:
        src: service-account.yaml.j2
        dest: "{{ db2_output_directory }}/service-account.yaml"
        
    - name: Add No Root Squash DB2 Service Account for NFS on IBM Cloud
      k8s:
        api_key: "{{ db2_k8s_api_key | default(omit) }}"
        host: "{{ db2_k8s_host | default(omit )}}"
        state: present
        force: False
        merge_type: merge
        src: "{{ db2_output_directory }}/service-account.yaml"
        wait: true
        wait_sleep: 15
        wait_timeout: 15
        
    - name: Prepare yaml for No Root Squash DB2 Role Binding for NFS on IBM Cloud
      template:
        src: privileged-scc-clusterrolebinding.yaml.j2
        dest: "{{ db2_output_directory }}/privileged-scc-clusterrolebinding.yaml"

    - name: Add No Root Squash DB2 Role Binding for NFS on IBM Cloud
      k8s:
        api_key: "{{ db2_k8s_api_key | default(omit) }}"
        host: "{{ db2_k8s_host | default(omit )}}"
        state: present
        force: True
        merge_type: merge
        src: "{{ db2_output_directory }}/privileged-scc-clusterrolebinding.yaml"
        wait: true
        wait_sleep: 15
        wait_timeout: 15

    - name: Prepare yaml for No Root Squash DB2 Daemon Set
      template:
        src: daemon-set.yaml.j2
        dest: "{{ db2_output_directory }}/daemon-set.yaml"
        
    - name: Add No Root Squash DB2 Daemon Set
      k8s:
        api_key: "{{ db2_k8s_api_key | default(omit) }}"
        host: "{{ db2_k8s_host | default(omit )}}"
        state: present
        force: False
        merge_type: merge
        src: "{{ db2_output_directory }}/daemon-set.yaml"
        wait: true
        wait_sleep: 15
        wait_timeout: 60

  when: storage_class_name == "ibmc-file-gold-gid"

- name: Prepare yaml file for the Operator Group
  template:
    src: operatorgroup.yaml.j2
    dest: "{{ db2_output_directory }}/operatorgroup.yaml"

- name: Add the Operator Group
  k8s:
    api_key: "{{ db2_k8s_api_key | default(omit)}}"
    host: "{{db2_k8s_host | default(omit)}}"
    state: present
    force: False
    merge_type: merge
    src: "{{ db2_output_directory }}/operatorgroup.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Prepare yaml file for the Operator Subscription
  template:
    src: subscription.yaml.j2
    dest: "{{ db2_output_directory }}/subscription.yaml"

- name: Add the Operator Subscription
  k8s:
    api_key: "{{ db2_k8s_api_key | default(omit)}}"
    host: "{{db2_k8s_host | default(omit)}}"
    state: present
    force: False
    merge_type: merge
    src: "{{ db2_output_directory }}/subscription.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for Operator Subscription
  k8s_info:
    api_key: "{{ db2_k8s_api_key | default(omit) }}"
    host: "{{ db2_k8s_host | default(omit) }}"
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: db2u-operator
    namespace: db2
  register: subscription
  retries: 10
  delay: 1
  until: ( 'InstallPlan' in subscription | json_query('resources[*].status.installplan.kind') | unique) 

- block: 

    - name: Get Install Plan Resource name
      set_fact: 
        install_plan_name: "{{ subscription | json_query('resources[0].status.installplan.name') }}"

    - name: Approve Install Plan
      k8s:
        api_key: "{{ db2_k8s_api_key | default(omit)}}"
        host: "{{db2_k8s_host | default(omit)}}"
        state: patched
        api_version: operators.coreos.com/v1alpha1
        kind: InstallPlan
        name: "{{ install_plan_name }}"
        namespace: db2
        definition:
          spec:
            approved: true

  when:  subscription | json_query('resources[*].status.installedCSV') | length == 0 

- name: Wait for DB2uCluster CRD to be Established
  k8s_info:
    api_key: "{{ db2_k8s_api_key | default(omit) }}"
    host: "{{ db2_k8s_host | default(omit) }}"
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: db2uclusters.db2u.databases.ibm.com
    namespace: db2
  register: db2ucluster_crd
  retries: 10
  delay: 1
  until: ('True' in db2ucluster_crd | json_query(condition_query))
  vars:
    condition_query: "resources[0].status.conditions[?type == 'Established'].status"

- name: Set Docker Registry Json
  set_fact: 
    docker_registry_json: '{{ {"auths": {"cp.icr.io": {"username": "cp", "password": icr_password}}} | to_json | b64encode }}'

- name: Prepare yaml file for Docker Registry Secret
  template:
    src: docker-secret.yaml.j2
    dest: "{{ db2_output_directory }}/docker-secret.yaml"

- name: Add the Docker Registry Secret
  k8s:
    api_key: "{{ db2_k8s_api_key | default(omit)}}"
    host: "{{db2_k8s_host | default(omit)}}"
    state: present
    force: False
    merge_type: merge
    src: "{{ db2_output_directory }}/docker-secret.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15


# Based on LI at http://www-03.ibm.com/software/sla/sladb.nsf/doclookup/F2925E0D5C24EAB4852586FE0060B3CC?OpenDocument DB2 Standard Edition is a supporting program with limitation of 16 CPU and 128 Memory
- name: Prepare yaml file for DB2uCluster Instance
  template:
    src: db2ucluster.yaml.j2
    dest: "{{ db2_output_directory }}/db2ucluster.yaml"

- name: Add the DB2uCluster Instance
  k8s:
    api_key: "{{ db2_k8s_api_key | default(omit)}}"
    host: "{{db2_k8s_host | default(omit)}}"
    state: present
    force: False
    merge_type: merge
    src: "{{ db2_output_directory }}/db2ucluster.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for the DB2uCluster Instance Ready State
  k8s_info:
    api_key: "{{ db2_k8s_api_key | default(omit) }}"
    host: "{{ db2_k8s_host | default(omit) }}"
    api_version: db2u.databases.ibm.com/v1
    kind: Db2uCluster
    name: db2ucluster
    namespace: db2
  register: db2ucluster
  retries: 60
  delay: 15
  until: ( 'Ready' in db2ucluster | json_query('resources[*].status.state') | unique) 