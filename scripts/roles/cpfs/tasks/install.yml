- name: Create CPFS directory for generated files
  file:
    path: "{{ cpfs_output_directory }}"
    state: directory
    mode: u+rwx

- name: Get Cluster Monitoring ConfigMap
  k8s_info:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    namespace: openshift-monitoring
    kind: ConfigMap
    name: cluster-monitoring-config
  register: configmap
  retries: 10
  delay: 1

- name: debug
  debug:
    msg: "{{ configmap }}"

- name: Manage Config Map
  block:
    - name: Prepare yaml file for Cluster Monitoring ConfigMap
      template:
        src: cluster-monitoring-config.yaml.j2
        dest: "{{ cpfs_output_directory }}/cluster-monitoring-config.yaml"
        mode: u+rwx

    - name: Add Cluster Monitoring ConfigMap
      k8s:
        api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
        host: "{{ cpfs_k8s_host | default(omit) }}"
        state: present
        force: false
        merge_type: merge
        namespace: openshift-monitoring
        src: "{{ cpfs_output_directory }}/cluster-monitoring-config.yaml"
        wait: true
        wait_sleep: 15
        wait_timeout: 15
  when: configmap | length > 0

# TODO add better configmap handling in case it exists and doesn't contain user worload enabled?

- name: Prepare yaml file for common-service Project
  template:
    src: common-service-project.yaml.j2
    dest: "{{ cpfs_output_directory }}/common-service-project.yaml"
    mode: u+rwx

- name: Add common-service Project
  k8s:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/common-service-project.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for Project
  k8s_info:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    api_version: project.openshift.io/v1
    kind: Project
    name: common-service
  register: project
  retries: 10
  delay: 1
  until: ('Active' in project | json_query(condition_query) | unique)
  vars:
    condition_query: "resources[*].status.phase"

- name: Prepare yaml file for ibm-common-services Project
  template:
    src: ibm-common-services-project.yaml.j2
    dest: "{{ cpfs_output_directory }}/ibm-common-services-project.yaml"
    mode: u+rwx

- name: Add Project
  k8s:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/ibm-common-services-project.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for Project
  k8s_info:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    api_version: project.openshift.io/v1
    kind: Project
    name: ibm-common-services
  register: project
  retries: 10
  delay: 1
  until: ('Active' in project | json_query(condition_query) | unique)
  vars:
    condition_query: "resources[*].status.phase"

- name: Prepare yaml file for the Operator Group
  template:
    src: operatorgroup.yaml.j2
    dest: "{{ cpfs_output_directory }}/operatorgroup.yaml"
    mode: u+rwx

- name: Add the Operator Group
  k8s:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/operatorgroup.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Prepare yaml file for the Operator Subscription
  template:
    src: subscription.yaml.j2
    dest: "{{ cpfs_output_directory }}/subscription.yaml"
    mode: u+rwx

- name: Add the Operator Subscription
  k8s:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    state: present
    force: false
    merge_type: merge
    namespace: common-service
    src: "{{ cpfs_output_directory }}/subscription.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Manage Manual Operator ibm-common-service-operator in common-service
  include_role:
    name: manage-manual-operator
  vars:
    manage_manual_operator_k8s_api_key: "{{ cpfs_k8s_api_key | default(omit)  }}"
    manage_manual_operator_k8s_host: "{{ cpfs_k8s_host | default(omit) }}"
    manage_manual_operator_namespace: common-service
    manage_manual_operator_subscription: ibm-common-service-operator
    manage_manual_operator_deployment: ibm-common-service-operator

- name: Manage Manual Operator ibm-common-service-operator in ibm-common-services
  include_role:
    name: manage-manual-operator
  vars:
    manage_manual_operator_k8s_api_key: "{{ cpfs_k8s_api_key | default(omit)  }}"
    manage_manual_operator_k8s_host: "{{ cpfs_k8s_host | default(omit) }}"
    manage_manual_operator_namespace: ibm-common-services
    manage_manual_operator_subscription: ibm-common-service-operator
    manage_manual_operator_deployment: ibm-common-service-operator

- name: Manage Manual Operator ibm-namespace-scope-operator
  include_role:
    name: manage-manual-operator
  vars:
    manage_manual_operator_k8s_api_key: "{{ cpfs_k8s_api_key | default(omit)  }}"
    manage_manual_operator_k8s_host: "{{ cpfs_k8s_host | default(omit) }}"
    manage_manual_operator_namespace: ibm-common-services
    manage_manual_operator_subscription: ibm-namespace-scope-operator
    manage_manual_operator_deployment: ibm-namespace-scope-operator

- name: Manage Manual Operator operand-deployment-lifecycle-manager-app
  include_role:
    name: manage-manual-operator
  vars:
    manage_manual_operator_k8s_api_key: "{{ cpfs_k8s_api_key | default(omit)  }}"
    manage_manual_operator_k8s_host: "{{ cpfs_k8s_host | default(omit) }}"
    manage_manual_operator_namespace: ibm-common-services
    manage_manual_operator_subscription: operand-deployment-lifecycle-manager-app
    manage_manual_operator_deployment: operand-deployment-lifecycle-manager

- name: Wait for OperandConfig CRD to be Established
  include_role:
    name: wait-crd
  vars:
    wait_crd_k8s_api_key: "{{ cpfs_k8s_api_key | default(omit)  }}"
    wait_crd_k8s_host: "{{ cpfs_k8s_host | default(omit) }}"
    wait_crd_name: operandconfigs.operator.ibm.com

- name: Wait for OperandConfig instance Initialized or Running state
  k8s_info:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    api_version: operator.ibm.com/v1alpha1
    kind: OperandConfig
    name: common-service
    namespace: ibm-common-services
  register: operand_config
  retries: 10
  delay: 15
  until: ('Initialized' in phase or 'Running' in phase)
  vars:
    condition_query: "resources[*].status.phase"
    phase: "{{ operand_config | json_query(condition_query) | unique }}"

- name: Get OperandConfig
  k8s_info:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    api_version: operator.ibm.com/v1alpha1
    kind: OperandConfig
    name: common-service
    namespace: ibm-common-services
  register: operand_config
  retries: 10
  delay: 1

- name: Patch authentication object to customize admin username if not done already
  block:
    - name: Get index of ibm-iam-operator
      set_fact:
        service_index: "{{ index | int }}"
      loop: "{{ operand_config | json_query('resources[0].spec.services') | flatten(levels=1) }}"
      when: item.name == "ibm-iam-operator"
      loop_control:
        index_var: index

    # Based on https://www.ibm.com/docs/en/cpfs?topic=services-configuring-foundational-by-using-custom-resource#default-admin for admin username
    - name: Patch authentication object to customize admin username
      kubernetes.core.k8s_json_patch:
        api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
        host: "{{ cpfs_k8s_host | default(omit) }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandConfig
        name: common-service
        namespace: ibm-common-services
        patch:
          - op: add
            path: "/spec/services/{{ service_index }}/spec/authentication/config/defaultAdminUser"
            value: "cpfsadmin"

  when: (operand_config | json_query(condition_query) | unique | length == 0 )
  vars:
    condition_query: "resources[0].spec.services[?name == 'ibm-iam-operator'].spec.authentication.config.defaultAdminUser"

- name: Set StorageClass for MongoDB if not done already
  block:
    - name: Get index of ibm-mongodb-operator
      set_fact:
        service_index: "{{ index | int }}"
      loop: "{{ operand_config | json_query('resources[0].spec.services') | flatten(levels=1) }}"
      when: item.name == "ibm-mongodb-operator"
      loop_control:
        index_var: index

    - name: Set StorageClass for MongoDB
      kubernetes.core.k8s_json_patch:
        api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
        host: "{{ cpfs_k8s_host | default(omit) }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandConfig
        name: common-service
        namespace: ibm-common-services
        patch:
          - op: add
            path: "/spec/services/{{ service_index }}/spec/mongoDB/storageClass"
            value: "{{ cpfs_storage_class_name }}"

  when: (operand_config | json_query(condition_query) | unique | length == 0 )
  vars:
    condition_query: "resources[0].spec.services[?name == 'ibm-mongodb-operator'].spec.mongoDB.storageClass"

- name: Set StorageClass for Mustgather if not done already
  block:
    - name: Get index of ibm-healthcheck-operator
      set_fact:
        service_index: "{{ index | int }}"
      loop: "{{ operand_config | json_query('resources[0].spec.services') | flatten(levels=1) }}"
      when: item.name == "ibm-healthcheck-operator"
      loop_control:
        index_var: index

    - name: Set StorageClass for Mustgather
      kubernetes.core.k8s_json_patch:
        api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
        host: "{{ cpfs_k8s_host | default(omit) }}"
        api_version: operator.ibm.com/v1alpha1
        kind: OperandConfig
        name: common-service
        namespace: ibm-common-services
        patch:
          - op: add
            path: "/spec/services/{{ service_index }}/spec/mustgatherService/persistentVolumeClaim"
            value: '{ "storageClassName": "{{ cpfs_storage_class_name }}"}'

  when: (operand_config | json_query(condition_query) | unique | length == 0 )
  vars:
    condition_query: "resources[0].spec.services[?name == 'ibm-healthcheck-operator'].spec.mustgatherService.persistentVolumeClaim.storageClassName"

- name: Set Container Registry Json
  set_fact:
    container_registry_json: '{{ {"auths": {"cp.icr.io": {"username": "cp", "password": cpfs_icr_password} }} | to_json | b64encode }}'

- name: Prepare yaml file for Container Registry Secret
  template:
    src: icr-secret.yaml.j2
    dest: "{{ cpfs_output_directory }}/icr-secret.yaml"
    mode: u+rwx

- name: Add the Container Registry Secret
  k8s:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/icr-secret.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Prepare yaml file for the OperandRequest instance
  template:
    src: operandrequest.yaml.j2
    dest: "{{ cpfs_output_directory }}/operandrequest.yaml"
    mode: u+rwx

- name: Apply OperandRequest instance
  k8s:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/operandrequest.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Manage Manual Operator ibm-commonui-operator
  include_role:
    name: manage-manual-operator
  vars:
    manage_manual_operator_k8s_api_key: "{{ cpfs_k8s_api_key | default(omit)  }}"
    manage_manual_operator_k8s_host: "{{ cpfs_k8s_host | default(omit) }}"
    manage_manual_operator_namespace: ibm-common-services
    manage_manual_operator_subscription: ibm-commonui-operator
    manage_manual_operator_deployment: ibm-commonui-operator

- name: Manage Manual Operator ibm-ingress-nginx-operator
  include_role:
    name: manage-manual-operator
  vars:
    manage_manual_operator_k8s_api_key: "{{ cpfs_k8s_api_key | default(omit)  }}"
    manage_manual_operator_k8s_host: "{{ cpfs_k8s_host | default(omit) }}"
    manage_manual_operator_namespace: ibm-common-services
    manage_manual_operator_subscription: ibm-ingress-nginx-operator
    manage_manual_operator_deployment: ibm-ingress-nginx-operator

- name: Wait for OperandRequest instance Running phase
  k8s_info:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    api_version: operator.ibm.com/v1alpha1
    kind: OperandRequest
    name: common-service
    namespace: ibm-common-services
  register: operand_request
  retries: 10
  delay: 15
  until: ('Running' in operand_request | json_query(condition_query) | unique)
  vars:
    condition_query: "resources[*].status.phase"

- name: Wait for IAM Ready status as an indicator that CPFS is installed
  k8s_info:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    kind: ConfigMap
    name: ibm-common-services-status
    namespace: kube-public
  register: config_map
  retries: 30
  delay: 60
  until: ('Ready' in config_map | json_query(condition_query) | unique)
  vars:
    condition_query: "resources[*].data.iamstatus"

- name: Ensure we have CA certificates and wildcards
  include_role:
    name: global-ca
  when: global_ca_output_directory is not defined

- name: Load TLS key data
  slurp:
    src: '{{ global_ca_output_directory }}/wildcard.key'
  register: slurped_key_data

- name: Decode data and store as fact
  set_fact:
    _tls_key: "{{ slurped_key_data.content }}"

- name: Load TLS key data
  slurp:
    src: '{{ global_ca_output_directory }}/wildcard.crt'
  register: slurped_crt_data

- name: Decode data and store as fact
  set_fact:
    _tls_crt: "{{ slurped_crt_data.content }}"

- name: Prepare yaml file for Secret
  template:
    src: license-service-secret.yaml.j2
    dest: "{{ cpfs_output_directory }}/license-service-secret.yaml"
    mode: u+rwx

# Based on https://www.ibm.com/docs/en/cpfs?topic=operator-using-custom-certificates
- name: Add Secret
  k8s:
    api_key: "{{ cpfs_k8s_api_key | default(omit) }}"
    host: "{{ cpfs_k8s_host | default(omit) }}"
    state: present
    force: false
    merge_type: merge
    src: "{{ cpfs_output_directory }}/license-service-secret.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15
