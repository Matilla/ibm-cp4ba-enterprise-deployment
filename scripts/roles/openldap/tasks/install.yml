- name: Create Catalog Source directory for generated files
  file:
    path: "{{ openldap_output_directory }}"
    state: directory
    mode: u+rwx

- name: Prepare yaml file for Project
  template:
    src: project.yaml.j2
    dest: "{{ openldap_output_directory }}/project.yaml"
    mode: u+rwx

- name: Add Project
  k8s:
    api_key: "{{ openldap_k8s_api_key | default(omit) }}"
    host: "{{ openldap_k8s_host | default(omit) }}"
    state: present
    force: false
    merge_type: merge
    src: "{{ openldap_output_directory }}/project.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for Project
  k8s_info:
    api_key: "{{ openldap_k8s_api_key | default(omit) }}"
    host: "{{ openldap_k8s_host | default(omit) }}"
    api_version: project.openshift.io/v1
    kind: Project
    name: openldap
  register: project
  retries: 10
  delay: 1
  until: ('Active' in project | json_query(phase_query) | unique)
  vars:
    phase_query: 'resources[*].status.phase'

- name: Prepare yaml file for anyuid ClusterRoleBinding
  template:
    src: anyuid-scc-clusterrolebinding.yaml.j2
    dest: "{{ openldap_output_directory }}/anyuid-scc-clusterrolebinding.yaml"
    mode: u+rwx

- name: Add anyuid ClusterRoleBinding
  k8s:
    api_key: "{{ openldap_k8s_api_key | default(omit) }}"
    host: "{{ openldap_k8s_host | default(omit) }}"
    state: present
    force: false
    merge_type: merge
    src: "{{ openldap_output_directory }}/anyuid-scc-clusterrolebinding.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Add helm-openldap chart repo
  kubernetes.core.helm_repository:
    name: helm-openldap
    repo_url: "https://jp-gouin.github.io/helm-openldap/"

# Custom schema LDIF based on https://stackoverflow.com/questions/45511696/creating-a-new-objectclass-and-attribute-in-openldap
- name: Prepare yaml file for values of helm chart
  template:
    src: values.yaml.j2
    dest: "{{ openldap_output_directory }}/values.yaml"
    mode: u+rwx

- name: Deploy openldap chart using values files on target
  kubernetes.core.helm:
    api_key: "{{ openldap_k8s_api_key | default(omit) }}"
    host: "{{ openldap_k8s_host | default(omit) }}"
    name: openldap
    chart_ref: helm-openldap/openldap-stack-ha
    chart_version: "{{ openldap_chart_version }}"
    release_namespace: openldap
    values_files:
      - "{{ openldap_output_directory }}/values.yaml"

- name: Ensure we have CA certificates and wildcards
  include_role:
    name: global-ca
  when: global_ca_output_directory is not defined

- name: Load TLS key data
  slurp:
    src: '{{ global_ca_output_directory }}/wildcard.key'
  register: slurped_key_data

- name: Decode data and store as fact
  set_fact:
    _tls_key: "{{ slurped_key_data.content }}"

- name: Load TLS key data
  slurp:
    src: '{{ global_ca_output_directory }}/wildcard.crt'
  register: slurped_crt_data

- name: Decode data and store as fact
  set_fact:
    _tls_crt: "{{ slurped_crt_data.content }}"

- name: Load TLS ca data
  slurp:
    src: '{{ openldap_ca_crt_path }}'
  register: slurped_ca_data

- name: Decode data and store as fact
  set_fact:
    _ca_crt: "{{ slurped_ca_data.content }}"

- name: Get OCP Apps Endpoint
  include_role:
    name: common
    tasks_from: apps-endpoint
  vars:
    common_k8s_api_key: "{{ openldap_k8s_api_key | default(omit) }}"
    common_k8s_host: "{{ openldap_k8s_host | default(omit) }}"
    common_output_to_var: "apps_endpoint_domain"
  when: apps_endpoint_domain is not defined

- name: Prepare yaml file for phpLDAPadmin Route
  template:
    src: php-ldap-route.yaml.j2
    dest: "{{ openldap_output_directory }}/php-ldap-route.yaml"
    mode: u+rwx

- name: Create phpLDAPadmin Route
  k8s:
    api_key: "{{ openldap_k8s_api_key | default(omit) }}"
    host: "{{ openldap_k8s_host | default(omit) }}"
    state: present
    force: false
    merge_type: merge
    namespace: openldap
    src: "{{ openldap_output_directory }}/php-ldap-route.yaml"
    wait: true
    wait_sleep: 15
    wait_timeout: 15

- name: Wait for the phpldapadmin Deployment to be Available
  k8s_info:
    api_key: "{{ openldap_k8s_api_key | default(omit) }}"
    host: "{{ openldap_k8s_host | default(omit) }}"
    api_version: apps/v1
    kind: Deployment
    name: openldap-phpldapadmin
    namespace: openldap
  register: openldap_phpldapadmin
  retries: 60
  delay: 15
  until: ('True' in openldap_phpldapadmin | json_query(condition_query) | unique )
  vars:
    condition_query: "resources[0].status.conditions[?type == 'Available'].status"

- name: Wait for the phpldapadmin pod to be Ready
  k8s_info:
    api_key: "{{ openldap_k8s_api_key | default(omit) }}"
    host: "{{ openldap_k8s_host | default(omit) }}"
    api_version: v1
    kind: Pod
    name: openldap-openldap-stack-ha-0
    namespace: openldap
  register: openldap_openldap_stack_ha_0
  retries: 60
  delay: 15
  until: ('True' in openldap_openldap_stack_ha_0 | json_query(condition_query) | unique )
  vars:
    condition_query: "resources[0].status.conditions[?type == 'Ready'].status"
